{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"SGYUNG 당신의 AI 스포츠 심판\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Loading...\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createCommentVNode(\" 채점하기 버튼 추가 \"), _createCommentVNode(\" <button @click=\\\"goToOutputPage\\\">채점하기</button> \")]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sources":["/Users/kjinh/Desktop/Sports-Police/FrontEnd/src/components/LoadingPage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>SGYUNG 당신의 AI 스포츠 심판</h1>\r\n      <p>Loading...</p>\r\n      <!-- 채점하기 버튼 추가 -->\r\n      <!-- <button @click=\"goToOutputPage\">채점하기</button> -->\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    mounted() {\r\n      this.goToOutputPage();\r\n    },\r\n\r\n    methods: {\r\n      async goToOutputPage() { // Analyze the video and push to OutputPage\r\n        try {\r\n\r\n          const youtubeLink = this.$route.query.link;\r\n          const groundTruthScore = this.$route.query.gt_score;\r\n\r\n          if (!youtubeLink) {\r\n            throw new Error('YouTube link is missing.');\r\n          }\r\n          console.log(\"reach here\");\r\n          // send a POST request to the backend\r\n          const response = await fetch('http://localhost:8000/analyze', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ \r\n              url: youtubeLink,\r\n              gt_score: groundTruthScore ? parseInt(groundTruthScore) : null\r\n            }),\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n\r\n\r\n          // Push to OutputPage with the result\r\n          this.$router.push({ // Push to OutputPage with the result\r\n            name: 'OutputPage',\r\n            query: {\r\n              report: result.report\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          alert('Failed to analyze video. Please try again later.');\r\n\r\n          // Redirect to InputPage\r\n          this.$router.push({ name: 'InputPage' });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style>\r\n  h1 {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    margin: 20px 0;\r\n  }\r\n  \r\n  p {\r\n    text-align: center;\r\n    font-size: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":";gCAEMA,mBAAA,CAA6B,YAAzB,sBAAoB;gCACxBA,mBAAA,CAAiB,WAAd,YAAU;;uBAFfC,mBAAA,CAKM,cAJJC,UAA6B,EAC7BC,UAAiB,EACjBC,mBAAA,gBAAmB,EACnBA,mBAAA,qDAAsD,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}